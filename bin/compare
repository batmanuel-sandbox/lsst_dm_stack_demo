#!/usr/bin/env python

import sys
import argparse
import numpy as np

# Data columns in the output
# (others are flags, which we don't compare)
COLUMNS = (0,1,2,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27)

def get_array(filename):
    with open(filename, 'r') as f:
        array = np.loadtxt(f, usecols=COLUMNS)
    return array

def relDifference(arr1, arr2):
    """
    Compute the 'relative difference' of numpy arrays arr1 & arr2.

    The relative difference R between numbers n1 and n2 is defined as per
    numdiff (http://www.nongnu.org/numdiff/numdiff.html):
    * R = 0 if n1 and n2 are equal,
    * R = Inf if n2 differs from n1 and at least one of them is zero,
    * R = A/ min(|n1|, |n2|) if n1 and n2 are both non zero and n2 differs from n1.
    """
    absDiff = np.abs(arr1 - arr2)

    # If there is a difference between 0 and something else, the result is
    # infinite.
    absDiff = np.where((absDiff != 0) & ((arr1 == 0) | (arr2 == 0)), np.inf, absDiff)

    # If both inputs are nan, the result is 0.
    absDiff = np.where(np.isnan(arr1) & np.isnan(arr2), 0, absDiff)

    # If one input is nan, the result is infinite.
    absDiff = np.where(np.logical_xor(np.isnan(arr1), np.isnan(arr2)), np.inf, absDiff)

    # Divide by the minimum of the inputs, unless 0 or nan.
    # If the minimum is 0 or nan, then either both inputs are 0/nan (so there's no
    # difference) or one is 0/nan (in which case the absolute difference is
    # already inf).
    divisor = np.where(np.minimum(arr1, arr2) == 0, 1, np.minimum(arr1, arr2))
    divisor = np.where(np.isnan(divisor),  1, divisor)

    return absDiff/np.abs(divisor)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', nargs=2)
    # Default tolerance chosen so that results measured on OS X 10.10.1,
    # Ubuntu 14.04 and CentOS 6.6 are all regarded as consistent.
    parser.add_argument('--tolerance', default=4e-3, type=float)
    args = parser.parse_args()
    maxDiff = relDifference(get_array(args.filename[0]), get_array(args.filename[1])).max()
    if maxDiff > args.tolerance:
        print "Failed (max difference %f over tolerance %f)." % (maxDiff, args.tolerance)
    else:
        print "Ok."
