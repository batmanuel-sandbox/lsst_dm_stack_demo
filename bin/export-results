#!/usr/bin/env python
import re
import sys
import numpy as np
import lsst.daf.persistence as dafPersist
from lsst.obs.sdss import SdssMapper
from lsst.afw.geom import Angle

if len(sys.argv) != 2:
    print >>sys.stderr, "Usage: export-results <output_directory>"
    exit(1);
outputdir = sys.argv[1]

# Load sources and print interesting columns

cols0 = ("id", 
        "coord.ra",
        "coord.dec",
        "flags.negative",
        "flags.badcentroid",
        "flags.pixel.edge",
        "flags.pixel.interpolated.any",
        "flags.pixel.interpolated.center",
        "flags.pixel.saturated.any",
        "flags.pixel.saturated.center",
        "centroid.sdss.x",
        "centroid.sdss.y",
        "centroid.sdss.err.xx",
        "centroid.sdss.err.yy",
        "shape.sdss.xx",
        "shape.sdss.xy",
        "shape.sdss.yy",
        "shape.sdss.err.xx",
        "shape.sdss.err.xy",
        "shape.sdss.err.yy",
        "shape.sdss.flags",
        "flux.gaussian",
        "flux.gaussian.err",
        "flux.psf",
        "flux.psf.err",
        "flux.sinc",
        "flux.sinc.err",
        "classification.extendedness",
        "correctfluxes.apcorr",
        "correctfluxes.apcorr.flags",
        )

cols1 = ("id", 
        "coord_ra",
        "coord_dec",
        "flags_negative",
        "base_SdssCentroid_flag",
        "base_PixelFlags_flag_edge",
        "base_PixelFlags_flag_interpolated",
        "base_PixelFlags_flag_interpolatedCenter",
        "base_PixelFlags_flag_saturated",
        "base_PixelFlags_flag_saturatedCenter",
        "base_SdssCentroid_x",
        "base_SdssCentroid_y",
        "base_SdssCentroid_xSigma",
        "base_SdssCentroid_ySigma",
        "base_SdssShape_xx",
        "base_SdssShape_xy",
        "base_SdssShape_yy",
        "base_SdssShape_xxSigma",
        "base_SdssShape_xxSigma",
        "base_SdssShape_xxSigma",
        "base_SdssShape_flag",
        "base_GaussianFlux_flux",
        "base_GaussianFlux_fluxSigma",
        "base_PsfFlux_flux",
        "base_PsfFlux_fluxSigma",
        "base_SincFlux_flux",
        "base_SincFlux_fluxSigma",
        "base_ClassificationExtendedness_value",
        #"correctfluxes_apcorr",
        #"correctfluxes.apcorr.flags",
        )

headerPrinted = False
butler = dafPersist.Butler(outputdir)
for filter in "ugriz":
    for dataId in (dict(run=4192, filter=filter, field=300, camcol=4),
                   dict(run=6377, filter=filter, field=399, camcol=4),
                   ):
        if not butler.datasetExists("src", **dataId):
            continue

        srcs = butler.get("src", **dataId)
        if srcs.getVersion() == 0:
            cols = cols0
        else:
            cols = cols1
        if not headerPrinted:
            print '#' + ' '.join(cols)
            headerPrinted = True
        vecs = []
        for col in cols:
            if col.endswith(".ra") or col.endswith(".dec") or col.endswith("_ra") or col.endswith("_dec"):
                v = np.rad2deg(srcs.get(col))
            elif re.search(r"\.err\.(xx|yy|xy)$", col):
                field, which = re.search(r"^(.*\.err)\.(xx|yy|xy)$", col).groups()
                key = srcs.schema.find(field).key
                key = key[0,0] if which == "xx" else key[1,1] if which == "yy" else key[0, 1]

                v = srcs.get(key)
            else:
                v = srcs.get(col)

            vecs.append(v)

        for vals in zip(*vecs):
            print ' '.join([str(el) for el in vals])
