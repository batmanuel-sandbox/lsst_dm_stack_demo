#!/usr/bin/env python

import sys
import lsst.daf.persistence as dafPersist
from lsst.obs.sdss import SdssMapper
from lsst.afw.geom import Angle

if len(sys.argv) != 2:
	print >>sys.stderr, "Usage: export-results <output_directory>"
	exit(1);
outputdir = sys.argv[1]

# Load sources and print interesting columns

cols = ("id", 
        "coord.ra",
        "coord.dec",
        "flags.negative",
        "flags.badcentroid",
        "flags.pixel.edge",
        "flags.pixel.interpolated.any",
        "flags.pixel.interpolated.center",
        "flags.pixel.saturated.any",
        "flags.pixel.saturated.center",
        "centroid.sdss.x",
        "centroid.sdss.y",
        "centroid.sdss.err.xx",
        "centroid.sdss.err.yy",
        "centroid.gaussian.x",
        "centroid.gaussian.y",
        "centroid.gaussian.err.xx",
        "centroid.gaussian.err.yy",
        "shape.sdss.ixx",
        "shape.sdss.ixy",
        "shape.sdss.iyy",
        "shape.sdss.err.ixx",
        "shape.sdss.err.ixy",
        "shape.sdss.err.iyy",
        "shape.sdss.flags",
        "flux.gaussian",
        "flux.gaussian.err",
        "flux.psf",
        "flux.psf.err",
        "flux.sinc",
        "flux.sinc.err",
        "multishapelet.exp.flux",
        "multishapelet.exp.flux.err",
        "multishapelet.dev.flux",
        "multishapelet.dev.flux.err",
        "multishapelet.combo.flux",
        "multishapelet.combo.flux.err",
        "classification.extendedness",
        "aperturecorrection",
        "aperturecorrection.err",
        )

print '#' + ' '.join(cols)

extractors = []
for col in cols:
    if col.endswith(".ra") or col.endswith(".dec"):
        extractors.append(lambda s, c=col: Angle(s.get(c)).asDegrees())
    elif col.endswith(".xx"):
        extractors.append(lambda s, c=col[0:col.rindex('.')]: s.get(c)[0][0])
    elif col.endswith(".yy"):
        extractors.append(lambda s, c=col[0:col.rindex('.')]: s.get(c)[1][1])
    elif col.endswith(".err.ixx"):
        extractors.append(lambda s, c=col[0:col.rindex('.')]: s.get(c)[0][0])
    elif col.endswith(".err.ixy"):
        extractors.append(lambda s, c=col[0:col.rindex('.')]: s.get(c)[1][1])
    elif col.endswith(".err.iyy"):
        extractors.append(lambda s, c=col[0:col.rindex('.')]: s.get(c)[2][2])
    elif col.endswith(".ixx"):
        extractors.append(lambda s, c=col[0:col.rindex('.')]: s.get(c).getIxx())
    elif col.endswith(".ixy"):
        extractors.append(lambda s, c=col[0:col.rindex('.')]: s.get(c).getIxy())
    elif col.endswith(".iyy"):
        extractors.append(lambda s, c=col[0:col.rindex('.')]: s.get(c).getIyy())
    else:
        extractors.append(lambda s, c=col: s.get(c))

butler = dafPersist.ButlerFactory(mapper=SdssMapper(root=outputdir)).create()
for filter in "ugriz":
    if butler.datasetExists("src", run=4192, filter=filter, field=300, camcol=4):
        srcs = butler.get("src", run=4192, filter=filter, field=300, camcol=4)
        for s in srcs:
            print ' '.join([str(e(s)) for e in extractors])
    if butler.datasetExists("src", run=6377, filter=filter, field=399, camcol=4):
        srcs = butler.get("src", run=6377, filter=filter, field=399, camcol=4)
        for s in srcs:
            print ' '.join([str(e(s)) for e in extractors])
