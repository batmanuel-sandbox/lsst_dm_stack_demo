#!/usr/bin/env python

import sys;
import numpy as np
import lsst.daf.persistence as dafPersist
from lsst.obs.lsstSim import LsstSimMapper

if len(sys.argv) != 2:
	print >>sys.stderr, "Usage: export-results <output_directory>"
	exit(1);
outputdir=sys.argv[1]

# Load sources
butler = dafPersist.ButlerFactory(mapper=LsstSimMapper(root=outputdir)).create()
srcs = butler.get("src", visit=886894611, raft="2,3", sensor="1,1")
realSources = srcs.getSources()

# Extract interesting columns and construct dtype
cols = "AmpExposureId ApDia ApFlux ApFluxErr FilterId FlagForDetection Id InstFlux InstFluxErr Ixx IxxErr Ixy IxyErr Iyy IyyErr ModelFlux ModelFluxErr PsfFlux PsfFluxErr SourceId TaiMidPoint TaiRange XAstrom XAstromErr YAstrom YAstromErr".split()
s = realSources[0]
type_map = { int: 'i8', float: 'f8' }
dtype = [ (col, type_map[type(getattr(s, 'get'+col)())] ) for col in cols ]

# Convert SourceSet to ndarray
table = np.empty(realSources.size(), dtype=dtype)
for k in xrange(len(table)):
	table[k] = tuple( getattr(realSources[k], 'get'+c)() for c in cols )

# Print it out (TODO: allow option to store to FITS)
fmt = "%2d %1.0f %10.2f %8.2f %2d %2d %2d %10.2f %8.2f     %8.2f %8.2f %8.2f %8.2f %8.2f %8.2f   %10.2f %8.2f %10.2f %8.2f   %2d    %13.6f %7.3f   %9.3f %5.3f %9.3f %5.3f"
print '# ' + ' '.join(cols)
for row in table:
	print fmt % tuple((row[col] for col in row.dtype.names))
