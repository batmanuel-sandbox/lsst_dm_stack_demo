#!/usr/bin/env python

import sys
import lsst.daf.persistence as dafPersist
from lsst.obs.sdss import SdssMapper

if len(sys.argv) != 2:
	print >>sys.stderr, "Usage: export-results <output_directory>"
	exit(1);
outputdir = sys.argv[1]

# Load sources and print interesting columns

colFormat = ("id", "%2d",
        "coord.ra", "%10.6f",
        "coord.dec", "%10.6f",
#        "flags.negative", "%1d",
#        "flags.badcentroid", "%1d",
        "centroid.sdss.x", "%9.3f",
        "centroid.sdss.y", "%9.3f",
#        "centrold.sdss.flags", "%1d",
#        "flags.pixel.edge", "%1d",
#        "flags.pixel.interpolated.any", "%1d",
#        "flags.pixel.interpolated.center", "%1d",
#        "flags.pixel.saturated.any", "%1d",
#        "flags.pixel.saturated.center", "%1d",
#        "shape.sdss.ixx", "%8.2f",
#        "shape.sdss.ixy", "%8.2f",
#        "shape.sdss.iyy", "%8.2f",
#        "shape.sdss.flags", "%1d",
        )


cols = [colFormat[2 * i] for i in range(len(colFormat)//2)]
print '#' + ' '.join(cols)
fmt = ' '.join([colFormat[2 * i + 1] for i in range(len(colFormat)//2)])

butler = dafPersist.ButlerFactory(mapper=SdssMapper(root=outputdir)).create()
for filter in ('u', 'g', 'r', 'i', 'z'):
    srcs = butler.get("src", run=4192, filter=filter, field=300, camcol=4)
    print srcs.schema
    for s in srcs:
	print fmt % tuple((s[col] for col in cols))
    srcs = butler.get("src", run=6377, filter=filter, field=399, camcol=4)
    for s in srcs:
	print fmt % tuple((s[col] for col in cols))
